generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  ethereumAddress     String              @id
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  totalPoints         Int                 @default(0)
  inviteLink          String              @unique
  invitedById         String?
  leaderboardRank     Int?
  discordHandle       String?             @unique
  githubHandle        String?             @unique
  twitterHandle       String?             @unique
  currentRewardDay    Int                 @default(1)
  inviteCount         Int                 @default(0)
  lastRewardClaimedAt DateTime?
  email               String?             @unique
  isOnWaitlist        Boolean             @default(false)
  isSubscribed        Boolean             @default(false)
  bridges             Bridges[]
  interactions        Interactions[]
  mints               Mints[]
  streaks             Streaks[]
  invitedBy           User?               @relation("ReferralRelation", fields: [invitedById], references: [ethereumAddress])
  referredUsers       User[]              @relation("ReferralRelation")
  dailyRewards        UserDailyReward[]
  VerificationToken   VerificationToken[]

  @@index([totalPoints])
}

model Mints {
  id              Int      @id @default(autoincrement())
  ethereumAddress String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  count           Int      @default(0)
  user            User     @relation(fields: [ethereumAddress], references: [ethereumAddress])
}

model Bridges {
  id              Int      @id @default(autoincrement())
  ethereumAddress String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  count           Int      @default(0)
  layerzeroCount  Int      @default(0)
  wormholeCount   Int      @default(0)
  user            User     @relation(fields: [ethereumAddress], references: [ethereumAddress])
}

model Interactions {
  id              Int      @id @default(autoincrement())
  ethereumAddress String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  count           Int      @default(0)
  user            User     @relation(fields: [ethereumAddress], references: [ethereumAddress])
}

model Streaks {
  id              Int       @id @default(autoincrement())
  ethereumAddress String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  startDate       DateTime
  endDate         DateTime?
  currentStreak   Int       @default(0)
  user            User      @relation(fields: [ethereumAddress], references: [ethereumAddress])
}

model DailyReward {
  id          Int               @id @default(autoincrement())
  day         Int               @unique
  reward      String
  description String
  points      Int
  users       UserDailyReward[]
}

model UserDailyReward {
  id            Int         @id @default(autoincrement())
  userId        String
  dailyRewardId Int
  claimedAt     DateTime    @default(now())
  dailyReward   DailyReward @relation(fields: [dailyRewardId], references: [id])
  user          User        @relation(fields: [userId], references: [ethereumAddress])
}

model VerificationToken {
  id         Int       @id @default(autoincrement())
  token      String    @unique
  identifier String
  expires    DateTime? @db.Timestamptz(6)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  user_email String
  User       User      @relation(fields: [user_email], references: [email])

  @@unique([identifier, token])
}

model DiscordEvent {
  id             Int      @id @default(autoincrement())
  discordEventId String   @unique
  scheduledStart DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  name           String?
}

model DiscordSupportTicket {
  id            Int                      @id @default(autoincrement())
  channelId     String?
  guildId       String
  type          DiscordSupportTicketType
  discordUserId String
  createdAt     DateTime                 @default(now()) @db.Timestamptz(6)
  closedAt      DateTime?                @db.Timestamptz(6)
  DiscordUser   DiscordUser              @relation(fields: [discordUserId], references: [id])
}

model DiscordUser {
  id                   String                 @id
  username             String
  createdAt            DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime               @db.Timestamptz(6)
  DiscordSupportTicket DiscordSupportTicket[]
  GmStreak             GmStreak?
  GnStreak             GnStreak?
}

model GmStreak {
  id            Int         @id @default(autoincrement())
  streak        Int         @default(0)
  highestStreak Int         @default(0)
  totalCount    Int         @default(0)
  lastGmDate    DateTime    @db.Timestamptz(6)
  discordUserId String      @unique
  DiscordUser   DiscordUser @relation(fields: [discordUserId], references: [id])
}

model GnStreak {
  id            Int         @id @default(autoincrement())
  streak        Int         @default(0)
  highestStreak Int         @default(0)
  totalCount    Int         @default(0)
  lastGnDate    DateTime    @db.Timestamptz(6)
  discordUserId String      @unique
  DiscordUser   DiscordUser @relation(fields: [discordUserId], references: [id])
}

// NEW SCHEMA

model Account {
  id                                    Int           @id @default(autoincrement())
  ethereumAddress                       String        @unique
  inviteCode                            String        @unique
  role                                  Role          @default(USER)
  createdAt                             DateTime      @default(now())
  updatedAt                             DateTime
  discordHandle                         String?       @unique
  email                                 String?       @unique
  githubHandle                          String?       @unique
  twitterHandle                         String?       @unique
  Interaction                           Interaction[]
  Referral_Referral_referredIdToAccount Referral[]    @relation("Referral_referredIdToAccount")
  Referral_Referral_referrerIdToAccount Referral[]    @relation("Referral_referrerIdToAccount")
  UserProject                           UserProject[]
  UserReward                            UserReward[]
  UserTask                              UserTask[]
}

model Interaction {
  id           Int             @id @default(autoincrement())
  type         InteractionType
  contractType ContractType?
  chainId      Int?
  points       Int             @default(0)
  userId       Int
  createdAt    DateTime        @default(now())
  updatedAt    DateTime
  Account      Account         @relation(fields: [userId], references: [id])
}

model Link {
  id        Int      @id @default(autoincrement())
  url       String
  type      LinkType
  projectId Int
  Project   Project  @relation(fields: [projectId], references: [id])
}

model Project {
  id               Int            @id @default(autoincrement())
  name             String
  shortDescription String
  about            String
  moreDescription  String
  difficulty       DifficultyType
  category         CategoryType
  likelihood       LikelihoodType
  rating           Float
  featured         Boolean        @default(false)
  network          String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  Link             Link[]
  Task             Task[]
  UserProject      UserProject[]
}

model Referral {
  id                                   Int      @id @default(autoincrement())
  referrerId                           Int
  referredId                           Int
  pointsAwarded                        Boolean  @default(false)
  points                               Int      @default(0)
  createdAt                            DateTime @default(now())
  updatedAt                            DateTime
  Account_Referral_referredIdToAccount Account  @relation("Referral_referredIdToAccount", fields: [referredId], references: [id])
  Account_Referral_referrerIdToAccount Account  @relation("Referral_referrerIdToAccount", fields: [referrerId], references: [id])
}

model Reward {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  basePoints  Int
  type        RewardType
  day         Int?
  isDeleted   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  UserReward  UserReward[]
}

model Step {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  taskId      Int
  Task        Task   @relation(fields: [taskId], references: [id])
}

model Task {
  id           Int            @id @default(autoincrement())
  name         String
  difficulty   DifficultyType
  about        String
  instructions String
  projectId    Int
  Step         Step[]
  Project      Project        @relation(fields: [projectId], references: [id])
  UserTask     UserTask[]
}

model UserProject {
  id        Int     @id @default(autoincrement())
  userId    Int
  projectId Int
  Project   Project @relation(fields: [projectId], references: [id])
  Account   Account @relation(fields: [userId], references: [id])
}

model UserReward {
  id        Int        @id @default(autoincrement())
  userId    Int
  rewardId  Int
  claimedAt DateTime   @default(now())
  type      RewardType
  points    Int        @default(0)
  Reward    Reward     @relation(fields: [rewardId], references: [id])
  Account   Account    @relation(fields: [userId], references: [id])
}

model UserTask {
  id        Int     @id @default(autoincrement())
  userId    Int
  taskId    Int
  completed Boolean @default(false)
  Task      Task    @relation(fields: [taskId], references: [id])
  Account   Account @relation(fields: [userId], references: [id])
}

enum DiscordSupportTicketType {
  VERIFICATION
  PARTNERSHIPS
  BUGS
  SCAM
  OTHER
}

enum CategoryType {
  L1
  L2
  DEFI
  NFT
  DAO
  OTHER
}

enum ContractType {
  NO_CONTRACT
  ONFT_ERC721
  OFT_ERC20
  GAS_REFUEL
  WNFT_ERC721
}

enum DifficultyType {
  EASY
  MEDIUM
  HARD
}

enum InteractionType {
  MINT
  BRIDGE
  V1
}

enum LikelihoodType {
  LOW
  MEDIUM
  HIGH
}

enum LinkType {
  TWITTER
  GITHUB
  TELEGRAM
  DISCORD
}

enum RewardType {
  DAILY
}

enum Role {
  ADMIN
  USER
}
